name: DEPI Final Project

on:
  push:
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRV_KEY }}
  SSH_PUBLIC_KEY: ${{ secrets.SSH_PUB_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  SSH_KEY_NAME: "github-actions-key"

jobs:
  Deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Check for Terraform Installation
        id: check_terraform
        run: |
          if command -v terraform &> /dev/null; then
            echo "Terraform is already installed."
            echo "terraform_cache_exists=true" >> $GITHUB_ENV
          else
            echo "Terraform not found. Installing..."
            echo "terraform_cache_exists=false" >> $GITHUB_ENV
          fi

      - name: Setup Terraform
        if: env.terraform_cache_exists == 'false'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Cache SSH Client Installation
        id: cache_ssh_client
        run: |
          if ! command -v ssh &> /dev/null; then
            echo "SSH client not found. Installing..."
            sudo apt-get update
            sudo apt-get install -y openssh-client
          else
            echo "SSH client is already installed."
          fi

      - name: Create Files for SSH keys
        run: |
              echo "${{ env.SSH_PRIVATE_KEY }}" > ${{ env.SSH_KEY_NAME }}
              echo "${{ env.SSH_PUBLIC_KEY }}" > ${{ env.SSH_KEY_NAME }}.pub

              mkdir ~/.ssh/
              cp ./${{ env.SSH_KEY_NAME }} ./${{ env.SSH_KEY_NAME }}.pub ~/.ssh/

              cat ~/.ssh/${{ env.SSH_KEY_NAME }}.pub | tee -a ~/.ssh/authorized_keys          

      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Apply
        id: apply
        env:
          TF_VAR_aws_access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_ssh_public_key: "~/.ssh/${{ env.SSH_KEY_NAME }}.pub"
          TF_VAR_ssh_private_key: "~/.ssh/${{ env.SSH_KEY_NAME }}"
        run: | 
            terraform apply -auto-approve
            ls -a

      - name: Get Instance IP
        id: instance_ip
        run: echo "INSTANCE_IP=$(terraform output -raw instance_ip)" >> $GITHUB_ENV

      - name: Add ec2 to known hosts
        run: |
             echo "${{ env.INSTANCE_IP }} $(cat ~/.ssh/${{ env.SSH_KEY_NAME }}.pub)" >> ~/.ssh/known_hosts

      - name: Install Ansible
        run: |
          if [ ! -d ~/.ansible ]; then
            sudo apt-get install -y ansible
          fi

      - name: Cache Ansible Installation
        uses: actions/cache@v3
        with:
          path: ~/.ansible
          key: ${{ runner.os }}-ansible-${{ hashFiles('**/requirements.yml') }}
          restore-keys: |
            ${{ runner.os }}-ansible-

                
      - name: Run Ansible Playbook
        run: |
            cd ./ansible
            ansible-playbook -i "${{ env.INSTANCE_IP }}," main.yml --private-key ~/.ssh/${{ env.SSH_KEY_NAME }}